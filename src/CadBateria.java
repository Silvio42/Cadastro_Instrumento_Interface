//Nome: Silvio Jorge de Oliveira -  RA: 2052261
//JLabel, JTextField, JButtons e JOptionPane, Relat√≥rios Individuais e em Grupo (JTable)

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class CadBateria extends javax.swing.JFrame {
    
    private Bateria ba = new Bateria();
    private static CadBateria batUnic;
    
    public static CadBateria getBateria(){
        if(batUnic == null){
            batUnic = new CadBateria();
        }
        return batUnic;
    }
    
    public CadBateria() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rotIdBat = new javax.swing.JLabel();
        rotNomeIns = new javax.swing.JLabel();
        rotQtdCor = new javax.swing.JLabel();
        rotQtdTons = new javax.swing.JLabel();
        rotTipoBum = new javax.swing.JLabel();
        cxIdBat = new javax.swing.JTextField();
        cxNomeIns = new javax.swing.JTextField();
        cxQtdCor = new javax.swing.JTextField();
        cxQtdTons = new javax.swing.JTextField();
        cxTipoBum = new javax.swing.JTextField();
        btInsBat = new javax.swing.JButton();
        btConsBat = new javax.swing.JButton();
        btAltBat = new javax.swing.JButton();
        btDelBat = new javax.swing.JButton();
        btLimp = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabeBat = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rotIdBat.setText("ID Bateria");

        rotNomeIns.setText("Nome Instrumento");

        rotQtdCor.setText("Quantidade de cordas");

        rotQtdTons.setText("Quantidade de tons");

        rotTipoBum.setText("Tipo Bumbo");

        cxNomeIns.setEditable(false);
        cxNomeIns.setText("Bateria");

        cxQtdCor.setEditable(false);
        cxQtdCor.setText("0");

        btInsBat.setText("Inserir Bateria");
        btInsBat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInsBatActionPerformed(evt);
            }
        });

        btConsBat.setText("Consultar Bateria");
        btConsBat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsBatActionPerformed(evt);
            }
        });

        btAltBat.setText("Alterar Bateria");
        btAltBat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAltBatActionPerformed(evt);
            }
        });

        btDelBat.setText("Deletar Bateria");
        btDelBat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelBatActionPerformed(evt);
            }
        });

        btLimp.setText("Limpar");
        btLimp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        tabeBat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Bateria", "Nome Instrumento", "Quantidade de Cordas", "Quantidade de Tons", "Quantidade de bumbos"
            }
        ));
        jScrollPane1.setViewportView(tabeBat);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btLimp)
                                .addGap(18, 18, 18)
                                .addComponent(btSair))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btInsBat)
                                .addGap(26, 26, 26)
                                .addComponent(btConsBat)))
                        .addGap(18, 18, 18)
                        .addComponent(btAltBat)
                        .addGap(18, 18, 18)
                        .addComponent(btDelBat))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rotQtdCor)
                            .addComponent(rotQtdTons)
                            .addComponent(rotTipoBum)
                            .addComponent(rotNomeIns)
                            .addComponent(rotIdBat))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cxIdBat)
                            .addComponent(cxNomeIns)
                            .addComponent(cxQtdTons)
                            .addComponent(cxQtdCor)
                            .addComponent(cxTipoBum))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rotIdBat)
                            .addComponent(cxIdBat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rotNomeIns)
                            .addComponent(cxNomeIns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rotQtdCor)
                            .addComponent(cxQtdCor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rotQtdTons)
                            .addComponent(cxQtdTons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rotTipoBum)
                            .addComponent(cxTipoBum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btInsBat)
                            .addComponent(btConsBat)
                            .addComponent(btAltBat)
                            .addComponent(btDelBat))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btLimp)
                    .addComponent(btSair))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        sair();
    }//GEN-LAST:event_btSairActionPerformed

    private void btLimpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpActionPerformed
        limpar();
    }//GEN-LAST:event_btLimpActionPerformed

    private void btInsBatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInsBatActionPerformed
        insBat();
        limpar();
        listarTab();
    }//GEN-LAST:event_btInsBatActionPerformed

    private void btConsBatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsBatActionPerformed
        consBatId();
        limpar();
    }//GEN-LAST:event_btConsBatActionPerformed

    private void btAltBatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAltBatActionPerformed
        altBatId();
        limpar();
        listarTab();
    }//GEN-LAST:event_btAltBatActionPerformed

    private void btDelBatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDelBatActionPerformed
       delBatIdGui();
       limpar();
       listarTab();
    }//GEN-LAST:event_btDelBatActionPerformed
     
    public void delBatIdGui() {
        ba = new Bateria();

        try {
            String idBatStr = cxIdBat.getText();

            // Verificar se a string n√£o est√° vazia
            if (!idBatStr.isEmpty()) {
                ba.setIdBat(Integer.parseInt(idBatStr));

                ba = BDBateria.getBDBateria().delBatIdBat(ba);

                if (ba == null) {
                    JOptionPane.showMessageDialog(
                        null,
                        "EXCLUSAO efetuada com sucesso!",
                        "Exclus√£o de Bateria",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                } else {
                    JOptionPane.showMessageDialog(
                        null,
                        "Bateria inexistente",
                        "Exclus√£o de Bateria",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            } else {
                // Tratar o caso de entrada vazia
                JOptionPane.showMessageDialog(
                    null,
                    "O campo ID da Bateria deve ser preenchido.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        } catch (NumberFormatException e) {
            // Tratar exce√ß√£o de formato inv√°lido para n√∫meros
            JOptionPane.showMessageDialog(
                null,
                "Formato inv√°lido para o ID da Bateria.",
                "Erro",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
        
    public void altBatId() {
        ba = new Bateria();

        try {
            String idBatStr = cxIdBat.getText();

            // Verificar se a string n√£o est√° vazia
            if (!idBatStr.isEmpty()) {
                ba.setIdBat(Integer.parseInt(idBatStr));

                ba = BDBateria.getBDBateria().altBatId(ba);

                if (ba != null) {
                    cxIdBat.setText(Integer.toString(ba.getIdBat()));
                    cxQtdCor.setText(Integer.toString(ba.getQtdDeCordas()));
                    cxQtdTons.setText(Integer.toString(ba.getQtdDeTons()));
                    cxTipoBum.setText(ba.getTipoDeBumbo());


                    JOptionPane.showMessageDialog(
                        null,
                        "Verifique os dados ALTERADOS da Bateria!",
                        "Altera√ß√£o de Bateria",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                } else {
                    JOptionPane.showMessageDialog(
                        null,
                        "Bateria inexistente",
                        "Altera√ß√£o de Bateria",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            } else {
                // Tratar o caso de entrada vazia
                JOptionPane.showMessageDialog(
                    null,
                    "O campo ID da Bateria deve ser preenchido.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        } catch (NumberFormatException e) {
            // Tratar exce√ß√£o de formato inv√°lido para n√∫meros
            JOptionPane.showMessageDialog(
                null,
                "Formato inv√°lido para o ID da Bateria.",
                "Erro",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    public void consBatId() {
        ba = new Bateria();
    
        String idBatText = cxIdBat.getText();
        if (!idBatText.isEmpty()) {
        try {
        ba.setIdBat(Integer.parseInt(idBatText));

        ba = BDBateria.getBDBateria().consBatId(ba);

        if (ba != null) {
            cxIdBat.setText(Integer.toString(ba.getIdBat()));
            cxQtdCor.setText(Integer.toString(ba.getQtdDeCordas()));
            cxQtdTons.setText(Integer.toString(ba.getQtdDeTons()));
            cxTipoBum.setText(ba.getTipoDeBumbo());

            JOptionPane.showMessageDialog(
                    null,
                    "Verifique os dados da Bateria!",
                    "Consulta de Bateria",
                    1
            );
        } else {
            JOptionPane.showMessageDialog(
                    null,
                    "Bateria inexistente",
                    "Cadastro de Bateria",
                    1
            );
        }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "O valor informado para o ID da guitarra √© inv√°lido. Por favor, insira um n√∫mero v√°lido.", "Erro de formato", JOptionPane.ERROR_MESSAGE);
        }
        } else {
            JOptionPane.showMessageDialog(null, "O campo de ID da guitarra est√° vazio. Por favor, insira um valor.", "Campo vazio", JOptionPane.ERROR_MESSAGE);
        }
}
    
    public void insBat() {
        ba = new Bateria();

        String idBatStr = cxIdBat.getText();
        String qtdDeTonsStr = cxQtdTons.getText();
        String tipoDeBumboStr = cxTipoBum.getText();

        try {
            // Verificar se as strings n√£o est√£o vazias
            if (!idBatStr.isEmpty() && !qtdDeTonsStr.isEmpty() && !tipoDeBumboStr.isEmpty()) {
                ba.setIdBat(Integer.parseInt(idBatStr));
                ba.setQtdDeTons(Integer.parseInt(qtdDeTonsStr));
                ba.setTipoDeBumbo(tipoDeBumboStr);

                ba = BDBateria.getBDBateria().cadBateria(ba);

                if (ba != null) {
                    JOptionPane.showMessageDialog(
                        null,
                        "Baixo cadastrado com sucesso!",
                        "Cadastro de Baixo",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                } else {
                    JOptionPane.showMessageDialog(
                        null,
                        "Bateria duplicada!",
                        "Cadastro de Bateria",
                        JOptionPane.ERROR_MESSAGE
                    );
                }
            } else {
                // Tratar o caso de entrada vazia
                JOptionPane.showMessageDialog(
                    null,
                    "Todos os campos devem ser preenchidos.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        } catch (NumberFormatException e) {
            // Tratar exce√ß√£o de formato inv√°lido para n√∫meros
            JOptionPane.showMessageDialog(
                null,
                "Formato inv√°lido para n√∫meros.",
                "Erro",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
        
    public void listarTab(){
        DefaultTableModel tabModel = (DefaultTableModel) tabeBat.getModel();
        int posLin = 0;
        tabModel.setRowCount(posLin);
        
        for(Bateria ba : BDBateria.getBDBateria().getBdBat()){
            tabModel.insertRow(posLin, new Object[]{ba.getIdBat(), "Bateria", "0", ba.getQtdDeTons(), ba.getTipoDeBumbo()});
            posLin++;
        }
    }
    public void sair(){
		
		int resp = JOptionPane.showConfirmDialog(
				null,
				"Deseja realmente sair?",
				"Saida",
				JOptionPane.YES_NO_OPTION
			);
		if(resp == 0){
			//System.exit(0);
			dispose();
		}
    }
    public void limpar(){
        cxIdBat.setText("");
	cxQtdTons.setText("");
        cxTipoBum.setText("");
	cxIdBat.requestFocus();
	}
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAltBat;
    private javax.swing.JButton btConsBat;
    private javax.swing.JButton btDelBat;
    private javax.swing.JButton btInsBat;
    private javax.swing.JButton btLimp;
    private javax.swing.JButton btSair;
    private javax.swing.JTextField cxIdBat;
    private javax.swing.JTextField cxNomeIns;
    private javax.swing.JTextField cxQtdCor;
    private javax.swing.JTextField cxQtdTons;
    private javax.swing.JTextField cxTipoBum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel rotIdBat;
    private javax.swing.JLabel rotNomeIns;
    private javax.swing.JLabel rotQtdCor;
    private javax.swing.JLabel rotQtdTons;
    private javax.swing.JLabel rotTipoBum;
    private javax.swing.JTable tabeBat;
    // End of variables declaration//GEN-END:variables
}
